
<!-- saved from url=(0069)http://lists.trolltech.com/qt4-preview-feedback/2007-05/msg00019.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script src="./Qt4-preview-feedback Archive - QSslSocket server side_files/__utm.js" type="text/javascript">&nbsp;</script><script language="JavaScript1.5">__utmjv='1.5';</script><title>Qt4-preview-feedback Archive - QSslSocket server side</title>
<style type="text/css">
<!--
h3.fn,span.fn { margin-left: 1cm; text-indent: -1cm; }
a:link { color: #004faf; text-decoration: none }
a:visited { color: #672967; text-decoration: none }
body { background: #ffffff; color: black; }
-->
</style>
<script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/document_iterator.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/find_proxy.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/get_html_text.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/global_constants.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/name_injection_builder.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/number_injection_builder.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/string_finder.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/change_sink.js"></script><meta name="document_iterator.js"><meta name="find_proxy.js"><meta name="get_html_text.js"><meta name="global_constants.js"><meta name="name_injection_builder.js"><meta name="number_injection_builder.js"><meta name="string_finder.js"><meta name="change_sink.js"></head><body>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tbody><tr bgcolor="#E5E5E5">
<td valign="center">
<a href="http://www.trolltech.com/">
<font color="#004faf">Trolltech Home</font></a> |
<a href="http://lists.trolltech.com/qt4-preview-feedback/"> 
<font color="#004faf">Qt4-preview-feedback Home</font></a> |
<a href="http://lists.trolltech.com/qt4-preview-feedback/2007-05/recent-index-0.html">
<font color="#004faf">Recent Threads</font></a> |
<a href="http://lists.trolltech.com/qt4-preview-feedback/2007-05/thread-index-0.html">
<font color="#004faf">All Threads</font></a> |
<a href="http://lists.trolltech.com/qt4-preview-feedback/2007-05/author.html">
<font color="#004faf">Author</font></a> |
<a href="http://lists.trolltech.com/qt4-preview-feedback/2007-05/date.html">
<font color="#004faf">Date</font></a>
</td>
<td align="right" valign="center"><img src="./Qt4-preview-feedback Archive - QSslSocket server side_files/logo32.png" align="right" width="64" height="32" border="0"></td></tr>
<tr bgcolor="#E5E5E5">
<td valign="center" colspan="2">
<a href="http://lists.trolltech.com/qt4-preview-feedback/2007-05/thread-index-0.html">All threads index page 1</a>
</td></tr>
</tbody></table><h1 align="center">Qt4-preview-feedback Archive, May 2007<br>QSslSocket server side</h1>

<hr>
<a name="msg00001">Message</a> 1 in thread<p>
<!-- MHonArc v2.6.10 -->
<!--X-Subject: QSslSocket server side -->
<!--X-From-R13: Rnir Ezvgu <qnirNgurfzvgusnz.bet> -->
<!--X-Date: Tue, 01 May 2007 12:33:10 &#45;0600 -->
<!--X-Message-Id: 463787E6.2080505@thesmithfam.org -->
<!--X-Content-Type: multipart/mixed -->
<!--X-Head-End-->

<!--X-Body-Begin-->
<!--X-User-Header-->

<!--X-User-Header-End-->
<!--X-TopPNI-->


<!--X-TopPNI-End-->
<!--X-MsgBody-->
<!--X-Subject-Header-Begin-->

<!--X-Subject-Header-End-->
<!--X-Head-of-Message-->
</p><ul>
<li><em>Subject</em>: QSslSocket server side</li>
<li><em>From</em>: Dave Smith &lt;<a href="mailto:dave@DOMAIN.HIDDEN">dave@xxxxxxxxxxxxxxx</a>&gt;</li>
<li><em>Date</em>: Tue, 01 May 2007 12:33:10 -0600</li>
<li><em>Delivered-to</em>: qt4-preview-feedback@trolltech.com</li>
<li><em>List-help</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=help">mailto:qt4-preview-feedback-request@trolltech.com?subject=help</a>&gt;</li>
<li><em>List-post</em>: &lt;<a href="mailto:qt4-preview-feedback@trolltech.com">mailto:qt4-preview-feedback@trolltech.com</a>&gt;</li>
<li><em>List-subscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe</a>&gt;</li>
<li><em>List-unsubscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe</a>&gt;</li>
<li><em>Resent-from</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
<li><em>Resent-message-id</em>: &lt;uvND3.A.SEE.rf4NGB@esparsett&gt;</li>
<li><em>Resent-sender</em>: <a href="mailto:qt4-preview-feedback-request@DOMAIN.HIDDEN">qt4-preview-feedback-request@xxxxxxxxxxxxx</a></li>
<li><em>To</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
</ul>
<!--X-Head-of-Message-End-->
<!--X-Head-Body-Sep-Begin-->
<p>
<!--X-Head-Body-Sep-End-->
<!--X-Body-of-Message-->
</p><pre>I am trying to get QSslSocket working on the server side. I've attached 
my server-side code (just one file: main.cxx). Is there something I'm 
doing wrong here? I'm using the SslClient example taken from a Trolltech 
blog post (maybe Andreas' blog, but can't recall) which works fine with 
www.google.com on port 443. Here's the output on my server:

MySslServer::incomingConnection( 8 )
MySslServer::stateChanged( 3 )
Calling sslSocket-&gt;startServerEncryption()
MySslServer::sslModeChanged( 2 )
MySslServer::error( -1 "Error during SSL handshake: error:1408A0C1:SSL 
routines:SSL3_GET_CLIENT_HELLO:no shared cipher" )
MySslServer::stateChanged( 6 )
MySslServer::stateChanged( 0 )
MySslServer::disconnected()

I noticed this and it might be a bug: QSslSocket does not appear to set 
the error code correctly (notice it's -1, but there *is* an error 
string). I ran my latest test with with The Qt 4.3.0-20070429 snapshot.

I  used this command to generate the "key" and "cert" QStrings, and I 
opened mycert.pem and copied the relevant portions into my code:

openssl req   -x509 -nodes -days 365   -newkey rsa:1024 -keyout 
mycert.pem -out mycert.pem

Any ideas?

--Dave

------------------------------------------------------------------------


//
// This program starts a server on port 1234 and listens for SSL clients.
// It tries to hand-shake with them when connected.
//

#include &lt;QCoreApplication&gt;
#include &lt;QTcpServer&gt;
#include &lt;QSslSocket&gt;
#include &lt;QSslCipher&gt;
#include &lt;QtDebug&gt;
#include &lt;QSslKey&gt;
#include &lt;QSslCertificate&gt;

static const int port = 1234;

class MySslServer : public QTcpServer
{
    Q_OBJECT
    public:
        MySslServer() : QTcpServer() {}
        virtual ~MySslServer() {}

    private slots:

        void readyRead();
        void encrypted();
        void sslModeChanged( QSslSocket::SslMode );
        void sslErrors( const QList&lt;QSslError&gt;&amp; );
        void disconnected();
        void connected();
        void error( QAbstractSocket::SocketError );
        void stateChanged( QAbstractSocket::SocketState );

    protected:
        virtual void incomingConnection( int socketDescriptor );
};

class MainApp : public QCoreApplication
{
    public:
        MainApp(int argc, char *argv[]);
        virtual ~MainApp();
        MySslServer *server;
};

void MySslServer::incomingConnection( int socketDescriptor )
{
    qDebug() &lt;&lt; "MySslServer::incomingConnection(" &lt;&lt; socketDescriptor &lt;&lt; ")";
    QSslSocket *sslSocket = new QSslSocket( this );

    connect( sslSocket, SIGNAL(readyRead()), this, SLOT(readyRead()) );
    connect( sslSocket, SIGNAL(encrypted()), this, SLOT(encrypted()) );
    connect( sslSocket, SIGNAL(modeChanged(QSslSocket::SslMode)), this, SLOT(sslModeChanged(QSslSocket::SslMode)) );
    connect( sslSocket, SIGNAL(sslErrors(const QList&lt;QSslError&gt;&amp;)), this, SLOT(sslErrors(const QList&lt;QSslError&gt;&amp;)) );
    connect( sslSocket, SIGNAL(disconnected()), this, SLOT(disconnected()) );
    connect( sslSocket, SIGNAL(connected()), this, SLOT(connected()) );
    connect( sslSocket, SIGNAL(error(QAbstractSocket::SocketError)), this, SLOT(error(QAbstractSocket::SocketError)) );
    connect( sslSocket, SIGNAL(stateChanged(QAbstractSocket::SocketState)), this, SLOT(stateChanged(QAbstractSocket::SocketState)) );


    QString key = 
        "MIICWgIBAAKBgQC8C7fiBETDG7ykGpmtRxc326Pm5HDoekHcUS7DxpCLr4cRWDc0"
        "52jfAXpOcEh1ExOwZe6yuve42v4LpEZ3UA/al0UB5/YaIiNX4Zv89las8hLMi+Ah"
        "FEv25vhFctKRD+MbwGV2aFqhfCXyXusF/hx+GVxm7Bm5K5im8RTy4y+2KwIDAQAB"
        "AoGABJIgWR0Tcs6kyjRfUeftd40eMcmRuQTnvuw2P8n+z3ZnyRMk3GNXmDwX9foi"
        "uL3K97mykKOcy+B+1lea4uGOUQ40pLkjZl+tAsHLirNDl9kkL44WUKw/Tlh429kp"
        "roeTI/jUjRESQoPRBP5Bwp21jX8lUAANOQRIf7xvDSpSMykCQQDrsaBbKlulPYpg"
        "3ejN5hTGGjDkFeGh/IgOBJWwjH1JhSrrYYCF/6ZXeKGuixBsuXhhbjlbjRq9IgJE"
        "8TR2rWsHAkEAzD8vH9HEvj31jJYlECBis0cUddUNsuqTryLhu+vPwZlQIjrG29/y"
        "72X+XVS6/x6wwUgl8/0ZnAUvDG9WteQ+vQJAcvuA43jSpNZU/9TCklBAqjR0zZDv"
        "NntgVJZgAHVJWeihe5the/2wRNQQ7HnjVWdWFxIS4VsBRGum98NEePE5WQI/AZh8"
        "xcLdxp61TGPf5kBahQwJHOKNONicTsH3AYDWHq0T8zCCXTVisHwbgJ8o1tVmjBwE"
        "L+PKT2268F3uT315AkB5QL7yPtRCzV1W1xFCeCl11cGceFKAubkUCMWckGGOX91O"
        "ggIv32fSA+5zt9XTsiGJRcNe/GOw9YFJC8mg7YFE";
    QString cert =
        "MIIDJDCCAo2gAwIBAgIBADANBgkqhkiG9w0BAQQFADBwMQswCQYDVQQGEwJVUzEN"
        "MAsGA1UECBMEVXRhaDEXMBUGA1UEBxMOU2FsdCBMYWtlIENpdHkxDDAKBgNVBAoT"
        "A0FTVDEMMAoGA1UECxMDVVRPMR0wGwYDVQQDExRkanNtaXRobHguYXBwc2lnLmNv"
        "bTAeFw0wNzA0MjQxOTU0MjlaFw0wODA0MjMxOTU0MjlaMHAxCzAJBgNVBAYTAlVT"
        "MQ0wCwYDVQQIEwRVdGFoMRcwFQYDVQQHEw5TYWx0IExha2UgQ2l0eTEMMAoGA1UE"
        "ChMDQVNUMQwwCgYDVQQLEwNVVE8xHTAbBgNVBAMTFGRqc21pdGhseC5hcHBzaWcu"
        "Y29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC8C7fiBETDG7ykGpmtRxc3"
        "26Pm5HDoekHcUS7DxpCLr4cRWDc052jfAXpOcEh1ExOwZe6yuve42v4LpEZ3UA/a"
        "l0UB5/YaIiNX4Zv89las8hLMi+AhFEv25vhFctKRD+MbwGV2aFqhfCXyXusF/hx+"
        "GVxm7Bm5K5im8RTy4y+2KwIDAQABo4HNMIHKMB0GA1UdDgQWBBQV/1cfoKpQ7B1u"
        "wutfOZpdOpGMfjCBmgYDVR0jBIGSMIGPgBQV/1cfoKpQ7B1uwutfOZpdOpGMfqF0"
        "pHIwcDELMAkGA1UEBhMCVVMxDTALBgNVBAgTBFV0YWgxFzAVBgNVBAcTDlNhbHQg"
        "TGFrZSBDaXR5MQwwCgYDVQQKEwNBU1QxDDAKBgNVBAsTA1VUTzEdMBsGA1UEAxMU"
        "ZGpzbWl0aGx4LmFwcHNpZy5jb22CAQAwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0B"
        "AQQFAAOBgQBDDv9Pds4cAzwcQmCH33st2zbs6i5HGkt43V2N9P8ze0GZa8Z88ni9"
        "uBPf/iNZY/y0k6cSPe/mLZM5FysrbByeNVarknxJbUconyRGlbyslfaqeZv7bZMh"
        "0GlXGA60mmCxyNglw4+BHRAboAK+ck7ssypzmA7hxqg4+l+i5brEpg==";

    sslSocket-&gt;setLocalCertificate( QSslCertificate( cert.toAscii() ) );
    sslSocket-&gt;setPrivateKey( QSslKey( key.toAscii(), QSsl::Rsa ) );

    #if 0
    qDebug() &lt;&lt; "  Supported ciphers:";
    foreach( QSslCipher cipher, QSslSocket::supportedCiphers() )
         qDebug() &lt;&lt; cipher.name();

    qDebug() &lt;&lt; "  Default ciphers:";
    foreach( QSslCipher cipher, QSslSocket::defaultCiphers() )
         qDebug() &lt;&lt; cipher.name();
    #endif

    if( sslSocket-&gt;setSocketDescriptor( socketDescriptor ) )
    {
        qDebug() &lt;&lt; "  sslSocket mode: " &lt;&lt; (int)sslSocket-&gt;mode();
        qDebug() &lt;&lt; "  sslSocket state:" &lt;&lt; (int)sslSocket-&gt;state();

        qDebug() &lt;&lt; "Calling sslSocket-&gt;startServerEncryption()"; 
        sslSocket-&gt;startServerEncryption();
    }
    else
    {
        qWarning() &lt;&lt; "Couldn't setSocketDescriptor(" &lt;&lt; socketDescriptor &lt;&lt; ") for this connection";
        delete sslSocket;
    }
}

void MySslServer::encrypted()
{
    qDebug() &lt;&lt; "MySslServer::encrypted()";
}

void MySslServer::sslModeChanged( QSslSocket::SslMode mode )
{
    qDebug() &lt;&lt; "MySslServer::sslModeChanged(" &lt;&lt; (int)mode &lt;&lt; ")";
}

void MySslServer::sslErrors( const QList&lt;QSslError&gt; &amp;errList )
{
    qDebug() &lt;&lt; "MySslServer::sslErrors(";
    foreach( QSslError err, errList )
        qDebug() &lt;&lt; "            " &lt;&lt; err.errorString();
    qDebug() &lt;&lt; ")";
}

void MySslServer::disconnected()
{
    qDebug() &lt;&lt; "MySslServer::disconnected()";
}

void MySslServer::connected()
{
    qDebug() &lt;&lt; "MySslServer::connected()";
}

void MySslServer::error( QAbstractSocket::SocketError err )
{
    QSslSocket *socket = qobject_cast&lt;QSslSocket*&gt;( sender() );
    Q_ASSERT( socket );

    qDebug() &lt;&lt; "MySslServer::error(" &lt;&lt; (int)err &lt;&lt; socket-&gt;errorString() &lt;&lt; ")";
}

void MySslServer::stateChanged( QAbstractSocket::SocketState state )
{
    qDebug() &lt;&lt; "MySslServer::stateChanged(" &lt;&lt; (int)state &lt;&lt; ")";
}

void MySslServer::readyRead()
{
    qDebug() &lt;&lt; "MySslServer::readyRead()";
    QSslSocket *socket = qobject_cast&lt;QSslSocket*&gt;( sender() );
    Q_ASSERT( socket );

    QTextStream stream( socket );

     QString line;
     while( ! (line = stream.readLine()).isNull() )
     {
         qDebug() &lt;&lt; "Read from socket:" &lt;&lt; line;
     }
}


MainApp::MainApp( int argc, char *argv[] ) : 
    QCoreApplication( argc, argv ), server( new MySslServer() )
{
    qDebug() &lt;&lt; "Listening on port" &lt;&lt; port &lt;&lt; "...";
    server-&gt;listen( QHostAddress::Any, port );
}

MainApp::~MainApp()
{
    delete server;
}

int main(int argc, char **argv)
{
    MainApp app(argc, argv);
    return app.exec();
}

#include "main.moc"


</pre><pre></pre><pre>//
// This program starts a server on port 1234 and listens for SSL clients.
// It tries to hand-shake with them when connected.
//

#include &lt;QCoreApplication&gt;
#include &lt;QTcpServer&gt;
#include &lt;QSslSocket&gt;
#include &lt;QSslCipher&gt;
#include &lt;QtDebug&gt;
#include &lt;QSslKey&gt;
#include &lt;QSslCertificate&gt;

static const int port = 1234;

class MySslServer : public QTcpServer
{
    Q_OBJECT
    public:
        MySslServer() : QTcpServer() {}
        virtual ~MySslServer() {}

    private slots:

        void readyRead();
        void encrypted();
        void sslModeChanged( QSslSocket::SslMode );
        void sslErrors( const QList&lt;QSslError&gt;&amp; );
        void disconnected();
        void connected();
        void error( QAbstractSocket::SocketError );
        void stateChanged( QAbstractSocket::SocketState );

    protected:
        virtual void incomingConnection( int socketDescriptor );
};

class MainApp : public QCoreApplication
{
    public:
        MainApp(int argc, char *argv[]);
        virtual ~MainApp();
        MySslServer *server;
};

void MySslServer::incomingConnection( int socketDescriptor )
{
    qDebug() &lt;&lt; "MySslServer::incomingConnection(" &lt;&lt; socketDescriptor &lt;&lt; ")";
    QSslSocket *sslSocket = new QSslSocket( this );

    connect( sslSocket, SIGNAL(readyRead()), this, SLOT(readyRead()) );
    connect( sslSocket, SIGNAL(encrypted()), this, SLOT(encrypted()) );
    connect( sslSocket, SIGNAL(modeChanged(QSslSocket::SslMode)), this, SLOT(sslModeChanged(QSslSocket::SslMode)) );
    connect( sslSocket, SIGNAL(sslErrors(const QList&lt;QSslError&gt;&amp;)), this, SLOT(sslErrors(const QList&lt;QSslError&gt;&amp;)) );
    connect( sslSocket, SIGNAL(disconnected()), this, SLOT(disconnected()) );
    connect( sslSocket, SIGNAL(connected()), this, SLOT(connected()) );
    connect( sslSocket, SIGNAL(error(QAbstractSocket::SocketError)), this, SLOT(error(QAbstractSocket::SocketError)) );
    connect( sslSocket, SIGNAL(stateChanged(QAbstractSocket::SocketState)), this, SLOT(stateChanged(QAbstractSocket::SocketState)) );


    QString key = 
        "MIICWgIBAAKBgQC8C7fiBETDG7ykGpmtRxc326Pm5HDoekHcUS7DxpCLr4cRWDc0"
        "52jfAXpOcEh1ExOwZe6yuve42v4LpEZ3UA/al0UB5/YaIiNX4Zv89las8hLMi+Ah"
        "FEv25vhFctKRD+MbwGV2aFqhfCXyXusF/hx+GVxm7Bm5K5im8RTy4y+2KwIDAQAB"
        "AoGABJIgWR0Tcs6kyjRfUeftd40eMcmRuQTnvuw2P8n+z3ZnyRMk3GNXmDwX9foi"
        "uL3K97mykKOcy+B+1lea4uGOUQ40pLkjZl+tAsHLirNDl9kkL44WUKw/Tlh429kp"
        "roeTI/jUjRESQoPRBP5Bwp21jX8lUAANOQRIf7xvDSpSMykCQQDrsaBbKlulPYpg"
        "3ejN5hTGGjDkFeGh/IgOBJWwjH1JhSrrYYCF/6ZXeKGuixBsuXhhbjlbjRq9IgJE"
        "8TR2rWsHAkEAzD8vH9HEvj31jJYlECBis0cUddUNsuqTryLhu+vPwZlQIjrG29/y"
        "72X+XVS6/x6wwUgl8/0ZnAUvDG9WteQ+vQJAcvuA43jSpNZU/9TCklBAqjR0zZDv"
        "NntgVJZgAHVJWeihe5the/2wRNQQ7HnjVWdWFxIS4VsBRGum98NEePE5WQI/AZh8"
        "xcLdxp61TGPf5kBahQwJHOKNONicTsH3AYDWHq0T8zCCXTVisHwbgJ8o1tVmjBwE"
        "L+PKT2268F3uT315AkB5QL7yPtRCzV1W1xFCeCl11cGceFKAubkUCMWckGGOX91O"
        "ggIv32fSA+5zt9XTsiGJRcNe/GOw9YFJC8mg7YFE";
    QString cert =
        "MIIDJDCCAo2gAwIBAgIBADANBgkqhkiG9w0BAQQFADBwMQswCQYDVQQGEwJVUzEN"
        "MAsGA1UECBMEVXRhaDEXMBUGA1UEBxMOU2FsdCBMYWtlIENpdHkxDDAKBgNVBAoT"
        "A0FTVDEMMAoGA1UECxMDVVRPMR0wGwYDVQQDExRkanNtaXRobHguYXBwc2lnLmNv"
        "bTAeFw0wNzA0MjQxOTU0MjlaFw0wODA0MjMxOTU0MjlaMHAxCzAJBgNVBAYTAlVT"
        "MQ0wCwYDVQQIEwRVdGFoMRcwFQYDVQQHEw5TYWx0IExha2UgQ2l0eTEMMAoGA1UE"
        "ChMDQVNUMQwwCgYDVQQLEwNVVE8xHTAbBgNVBAMTFGRqc21pdGhseC5hcHBzaWcu"
        "Y29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC8C7fiBETDG7ykGpmtRxc3"
        "26Pm5HDoekHcUS7DxpCLr4cRWDc052jfAXpOcEh1ExOwZe6yuve42v4LpEZ3UA/a"
        "l0UB5/YaIiNX4Zv89las8hLMi+AhFEv25vhFctKRD+MbwGV2aFqhfCXyXusF/hx+"
        "GVxm7Bm5K5im8RTy4y+2KwIDAQABo4HNMIHKMB0GA1UdDgQWBBQV/1cfoKpQ7B1u"
        "wutfOZpdOpGMfjCBmgYDVR0jBIGSMIGPgBQV/1cfoKpQ7B1uwutfOZpdOpGMfqF0"
        "pHIwcDELMAkGA1UEBhMCVVMxDTALBgNVBAgTBFV0YWgxFzAVBgNVBAcTDlNhbHQg"
        "TGFrZSBDaXR5MQwwCgYDVQQKEwNBU1QxDDAKBgNVBAsTA1VUTzEdMBsGA1UEAxMU"
        "ZGpzbWl0aGx4LmFwcHNpZy5jb22CAQAwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0B"
        "AQQFAAOBgQBDDv9Pds4cAzwcQmCH33st2zbs6i5HGkt43V2N9P8ze0GZa8Z88ni9"
        "uBPf/iNZY/y0k6cSPe/mLZM5FysrbByeNVarknxJbUconyRGlbyslfaqeZv7bZMh"
        "0GlXGA60mmCxyNglw4+BHRAboAK+ck7ssypzmA7hxqg4+l+i5brEpg==";

    sslSocket-&gt;setLocalCertificate( QSslCertificate( cert.toAscii() ) );
    sslSocket-&gt;setPrivateKey( QSslKey( key.toAscii(), QSsl::Rsa ) );

    #if 0
    qDebug() &lt;&lt; "  Supported ciphers:";
    foreach( QSslCipher cipher, QSslSocket::supportedCiphers() )
         qDebug() &lt;&lt; cipher.name();

    qDebug() &lt;&lt; "  Default ciphers:";
    foreach( QSslCipher cipher, QSslSocket::defaultCiphers() )
         qDebug() &lt;&lt; cipher.name();
    #endif

    if( sslSocket-&gt;setSocketDescriptor( socketDescriptor ) )
    {
        qDebug() &lt;&lt; "  sslSocket mode: " &lt;&lt; (int)sslSocket-&gt;mode();
        qDebug() &lt;&lt; "  sslSocket state:" &lt;&lt; (int)sslSocket-&gt;state();

        qDebug() &lt;&lt; "Calling sslSocket-&gt;startServerEncryption()"; 
        sslSocket-&gt;startServerEncryption();
    }
    else
    {
        qWarning() &lt;&lt; "Couldn't setSocketDescriptor(" &lt;&lt; socketDescriptor &lt;&lt; ") for this connection";
        delete sslSocket;
    }
}

void MySslServer::encrypted()
{
    qDebug() &lt;&lt; "MySslServer::encrypted()";
}

void MySslServer::sslModeChanged( QSslSocket::SslMode mode )
{
    qDebug() &lt;&lt; "MySslServer::sslModeChanged(" &lt;&lt; (int)mode &lt;&lt; ")";
}

void MySslServer::sslErrors( const QList&lt;QSslError&gt; &amp;errList )
{
    qDebug() &lt;&lt; "MySslServer::sslErrors(";
    foreach( QSslError err, errList )
        qDebug() &lt;&lt; "            " &lt;&lt; err.errorString();
    qDebug() &lt;&lt; ")";
}

void MySslServer::disconnected()
{
    qDebug() &lt;&lt; "MySslServer::disconnected()";
}

void MySslServer::connected()
{
    qDebug() &lt;&lt; "MySslServer::connected()";
}

void MySslServer::error( QAbstractSocket::SocketError err )
{
    QSslSocket *socket = qobject_cast&lt;QSslSocket*&gt;( sender() );
    Q_ASSERT( socket );

    qDebug() &lt;&lt; "MySslServer::error(" &lt;&lt; (int)err &lt;&lt; socket-&gt;errorString() &lt;&lt; ")";
}

void MySslServer::stateChanged( QAbstractSocket::SocketState state )
{
    qDebug() &lt;&lt; "MySslServer::stateChanged(" &lt;&lt; (int)state &lt;&lt; ")";
}

void MySslServer::readyRead()
{
    qDebug() &lt;&lt; "MySslServer::readyRead()";
    QSslSocket *socket = qobject_cast&lt;QSslSocket*&gt;( sender() );
    Q_ASSERT( socket );

    QTextStream stream( socket );

     QString line;
     while( ! (line = stream.readLine()).isNull() )
     {
         qDebug() &lt;&lt; "Read from socket:" &lt;&lt; line;
     }
}


MainApp::MainApp( int argc, char *argv[] ) : 
    QCoreApplication( argc, argv ), server( new MySslServer() )
{
    qDebug() &lt;&lt; "Listening on port" &lt;&lt; port &lt;&lt; "...";
    server-&gt;listen( QHostAddress::Any, port );
}

MainApp::~MainApp()
{
    delete server;
}

int main(int argc, char **argv)
{
    MainApp app(argc, argv);
    return app.exec();
}

#include "main.moc"

</pre>

<!--X-Body-of-Message-End-->
<!--X-MsgBody-End-->
<!--X-Follow-Ups-->
<hr>
<!--X-Follow-Ups-End-->
<!--X-References-->
<!--X-References-End-->
<!--X-BotPNI-->


<!--X-BotPNI-End-->
<!--X-User-Footer-->

<!--X-User-Footer-End-->

<a name="msg00019">Message</a> 2 in thread<p>
<!-- MHonArc v2.6.10 -->
<!--X-Subject: Re: QSslSocket server side -->
<!--X-From-R13: Oaqernf Oneqny Vnaffra <nunaffraNgebyygrpu.pbz> -->
<!--X-Date: Mon, 07 May 2007 15:40:20 +0200 -->
<!--X-Message-Id: f1na84$8tn$1@motorkatt.troll.no -->
<!--X-Content-Type: text/plain -->
<!--X-Reference: 463787E6.2080505@thesmithfam.org -->
<!--X-Head-End-->

<!--X-Body-Begin-->
<!--X-User-Header-->

<!--X-User-Header-End-->
<!--X-TopPNI-->


<!--X-TopPNI-End-->
<!--X-MsgBody-->
<!--X-Subject-Header-Begin-->

<!--X-Subject-Header-End-->
<!--X-Head-of-Message-->
</p><ul>
<li><em>Subject</em>: Re: QSslSocket server side</li>
<li><em>From</em>: Andreas Aardal Hanssen &lt;<a href="mailto:ahanssen@DOMAIN.HIDDEN">ahanssen@xxxxxxxxxxxxx</a>&gt;</li>
<li><em>Date</em>: Mon, 07 May 2007 15:40:20 +0200</li>
<li><em>Delivered-to</em>: qt4-preview-feedback@trolltech.com</li>
<li><em>List-help</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=help">mailto:qt4-preview-feedback-request@trolltech.com?subject=help</a>&gt;</li>
<li><em>List-post</em>: &lt;<a href="mailto:qt4-preview-feedback@trolltech.com">mailto:qt4-preview-feedback@trolltech.com</a>&gt;</li>
<li><em>List-subscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe</a>&gt;</li>
<li><em>List-unsubscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe</a>&gt;</li>
<li><em>Organization</em>: Trolltech ASA (Oslo Office)</li>
<li><em>Resent-from</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
<li><em>Resent-message-id</em>: &lt;NV2viD.A.iJF.FxyPGB@esparsett&gt;</li>
<li><em>Resent-sender</em>: <a href="mailto:qt4-preview-feedback-request@DOMAIN.HIDDEN">qt4-preview-feedback-request@xxxxxxxxxxxxx</a></li>
<li><em>To</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
</ul>
<!--X-Head-of-Message-End-->
<!--X-Head-Body-Sep-Begin-->
<p>
<!--X-Head-Body-Sep-End-->
<!--X-Body-of-Message-->
</p><pre>Dave Smith wrote:
&gt; I am trying to get QSslSocket working on the server side. I've attached
&gt; my server-side code (just one file: main.cxx). Is there something I'm
&gt; doing wrong here?
&gt;     sslSocket-&gt;setLocalCertificate( QSslCertificate( cert.toAscii() ) );
&gt;     sslSocket-&gt;setPrivateKey( QSslKey( key.toAscii(), QSsl::Rsa ) );

Both your certificate and your private key are null; there's certainly a bug
here, but the one stopping your server from working is in your code ;-).
Notice that both QSslCertificate and QSslKey take a PEM encoded certificate
by default, but what you're sending is pure base64 - it's missing the PEM
header and footer. The key and cert do not parse successfully, and so they
end up being null certs/keys. Setting a null key is a noop, so your server
ends up having no key and no certificate, so the SSL context fails to
initialize, so there's no shared cipher ;-).

The bug is that QSslSocket doesn't let you know why it failed. It does tell
you why at the lowest level possible, but the real problem is that the cert
and key are empty / failed to parse.

Hope that helps! I'll see if we can fix the error reporting bug.

-- 
 [ signature omitted ] 
</pre>
<!--X-Body-of-Message-End-->
<!--X-MsgBody-End-->
<!--X-Follow-Ups-->
<hr>
<!--X-Follow-Ups-End-->
<!--X-References-->
<!--X-References-End-->
<!--X-BotPNI-->


<!--X-BotPNI-End-->
<!--X-User-Footer-->

<!--X-User-Footer-End-->

<a name="msg00020">Message</a> 3 in thread<p>
<!-- MHonArc v2.6.10 -->
<!--X-Subject: Re: QSslSocket server side -->
<!--X-From-R13: Rnir Ezvgu <qnirNgurfzvgusnz.bet> -->
<!--X-Date: Mon, 07 May 2007 08:15:21 &#45;0600 -->
<!--X-Message-Id: 463F3479.4010100@thesmithfam.org -->
<!--X-Content-Type: text/plain -->
<!--X-Reference: 463787E6.2080505@thesmithfam.org -->
<!--X-Reference: f1na84$8tn$1@motorkatt.troll.no -->
<!--X-Head-End-->

<!--X-Body-Begin-->
<!--X-User-Header-->

<!--X-User-Header-End-->
<!--X-TopPNI-->


<!--X-TopPNI-End-->
<!--X-MsgBody-->
<!--X-Subject-Header-Begin-->

<!--X-Subject-Header-End-->
<!--X-Head-of-Message-->
</p><ul>
<li><em>Subject</em>: Re: QSslSocket server side</li>
<li><em>From</em>: Dave Smith &lt;<a href="mailto:dave@DOMAIN.HIDDEN">dave@xxxxxxxxxxxxxxx</a>&gt;</li>
<li><em>Date</em>: Mon, 07 May 2007 08:15:21 -0600</li>
<li><em>Cc</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
<li><em>Delivered-to</em>: qt4-preview-feedback@trolltech.com</li>
<li><em>List-help</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=help">mailto:qt4-preview-feedback-request@trolltech.com?subject=help</a>&gt;</li>
<li><em>List-post</em>: &lt;<a href="mailto:qt4-preview-feedback@trolltech.com">mailto:qt4-preview-feedback@trolltech.com</a>&gt;</li>
<li><em>List-subscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe</a>&gt;</li>
<li><em>List-unsubscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe</a>&gt;</li>
<li><em>Resent-from</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
<li><em>Resent-message-id</em>: &lt;cfQYg.A.j1B.ASzPGB@esparsett&gt;</li>
<li><em>Resent-sender</em>: <a href="mailto:qt4-preview-feedback-request@DOMAIN.HIDDEN">qt4-preview-feedback-request@xxxxxxxxxxxxx</a></li>
<li><em>To</em>: Andreas Aardal Hanssen &lt;<a href="mailto:ahanssen@DOMAIN.HIDDEN">ahanssen@xxxxxxxxxxxxx</a>&gt;</li>
</ul>
<!--X-Head-of-Message-End-->
<!--X-Head-Body-Sep-Begin-->
<p>
<!--X-Head-Body-Sep-End-->
<!--X-Body-of-Message-->
</p><pre>Andreas Aardal Hanssen wrote:
&gt; Both your certificate and your private key are null; there's certainly a bug
&gt; here, but the one stopping your server from working is in your code ;-).
&gt; Notice that both QSslCertificate and QSslKey take a PEM encoded certificate
&gt; by default, but what you're sending is pure base64 - it's missing the PEM
&gt; header and footer. The key and cert do not parse successfully, and so they
&gt; end up being null certs/keys. Setting a null key is a noop, so your server
&gt; ends up having no key and no certificate, so the SSL context fails to
&gt; initialize, so there's no shared cipher ;-).
&gt;
&gt; The bug is that QSslSocket doesn't let you know why it failed. It does tell
&gt; you why at the lowest level possible, but the real problem is that the cert
&gt; and key are empty / failed to parse.
&gt;
&gt; Hope that helps! I'll see if we can fix the error reporting bug

Thanks for the info Andreas. I've modified my code to include the 
headers/footers for the key and cert, and now I realize that I should 
check for isNull() on them as well. My cert is showing as null, even 
after changing my strings to look like this:

    QString keyStr =
        "-----BEGIN RSA PRIVATE KEY-----\n"
        "MIICWgIBAAKBgQC8C7fiBETDG7ykGpmtRxc326Pm5HDoekHcUS7DxpCLr4cRWDc0"
        "52jfAXpOcEh1ExOwZe6yuve42v4LpEZ3UA/al0UB5/YaIiNX4Zv89las8hLMi+Ah"
        "FEv25vhFctKRD+MbwGV2aFqhfCXyXusF/hx+GVxm7Bm5K5im8RTy4y+2KwIDAQAB"
        "AoGABJIgWR0Tcs6kyjRfUeftd40eMcmRuQTnvuw2P8n+z3ZnyRMk3GNXmDwX9foi"
        "uL3K97mykKOcy+B+1lea4uGOUQ40pLkjZl+tAsHLirNDl9kkL44WUKw/Tlh429kp"
        "roeTI/jUjRESQoPRBP5Bwp21jX8lUAANOQRIf7xvDSpSMykCQQDrsaBbKlulPYpg"
        "3ejN5hTGGjDkFeGh/IgOBJWwjH1JhSrrYYCF/6ZXeKGuixBsuXhhbjlbjRq9IgJE"
        "8TR2rWsHAkEAzD8vH9HEvj31jJYlECBis0cUddUNsuqTryLhu+vPwZlQIjrG29/y"
        "72X+XVS6/x6wwUgl8/0ZnAUvDG9WteQ+vQJAcvuA43jSpNZU/9TCklBAqjR0zZDv"
        "NntgVJZgAHVJWeihe5the/2wRNQQ7HnjVWdWFxIS4VsBRGum98NEePE5WQI/AZh8"
        "xcLdxp61TGPf5kBahQwJHOKNONicTsH3AYDWHq0T8zCCXTVisHwbgJ8o1tVmjBwE"
        "L+PKT2268F3uT315AkB5QL7yPtRCzV1W1xFCeCl11cGceFKAubkUCMWckGGOX91O"
        "ggIv32fSA+5zt9XTsiGJRcNe/GOw9YFJC8mg7YFE\n"
        "-----END RSA PRIVATE KEY-----";
    QString certStr =
        "-----BEGIN CERTIFICATE-----\n"
        "MIIDJDCCAo2gAwIBAgIBADANBgkqhkiG9w0BAQQFADBwMQswCQYDVQQGEwJVUzEN"
        "MAsGA1UECBMEVXRhaDEXMBUGA1UEBxMOU2FsdCBMYWtlIENpdHkxDDAKBgNVBAoT"
        "A0FTVDEMMAoGA1UECxMDVVRPMR0wGwYDVQQDExRkanNtaXRobHguYXBwc2lnLmNv"
        "bTAeFw0wNzA0MjQxOTU0MjlaFw0wODA0MjMxOTU0MjlaMHAxCzAJBgNVBAYTAlVT"
        "MQ0wCwYDVQQIEwRVdGFoMRcwFQYDVQQHEw5TYWx0IExha2UgQ2l0eTEMMAoGA1UE"
        "ChMDQVNUMQwwCgYDVQQLEwNVVE8xHTAbBgNVBAMTFGRqc21pdGhseC5hcHBzaWcu"
        "Y29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC8C7fiBETDG7ykGpmtRxc3"
        "26Pm5HDoekHcUS7DxpCLr4cRWDc052jfAXpOcEh1ExOwZe6yuve42v4LpEZ3UA/a"
        "l0UB5/YaIiNX4Zv89las8hLMi+AhFEv25vhFctKRD+MbwGV2aFqhfCXyXusF/hx+"
        "GVxm7Bm5K5im8RTy4y+2KwIDAQABo4HNMIHKMB0GA1UdDgQWBBQV/1cfoKpQ7B1u"
        "wutfOZpdOpGMfjCBmgYDVR0jBIGSMIGPgBQV/1cfoKpQ7B1uwutfOZpdOpGMfqF0"
        "pHIwcDELMAkGA1UEBhMCVVMxDTALBgNVBAgTBFV0YWgxFzAVBgNVBAcTDlNhbHQg"
        "TGFrZSBDaXR5MQwwCgYDVQQKEwNBU1QxDDAKBgNVBAsTA1VUTzEdMBsGA1UEAxMU"
        "ZGpzbWl0aGx4LmFwcHNpZy5jb22CAQAwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0B"
        "AQQFAAOBgQBDDv9Pds4cAzwcQmCH33st2zbs6i5HGkt43V2N9P8ze0GZa8Z88ni9"
        "uBPf/iNZY/y0k6cSPe/mLZM5FysrbByeNVarknxJbUconyRGlbyslfaqeZv7bZMh"
        "0GlXGA60mmCxyNglw4+BHRAboAK+ck7ssypzmA7hxqg4+l+i5brEpg==\n"
        "-----END CERTIFICATE-----";


I'm going to try to load the cert/key from file now and report how that 
goes.

To unsubscribe - send "unsubscribe" in the subject to qt4-preview-feedback-request@xxxxxxxxxxxxx

</pre>

<!--X-Body-of-Message-End-->
<!--X-MsgBody-End-->
<!--X-Follow-Ups-->
<hr>
<!--X-Follow-Ups-End-->
<!--X-References-->
<!--X-References-End-->
<!--X-BotPNI-->


<!--X-BotPNI-End-->
<!--X-User-Footer-->

<!--X-User-Footer-End-->

<a name="msg00033">Message</a> 4 in thread<p>
<!-- MHonArc v2.6.10 -->
<!--X-Subject: Re: QSslSocket server side -->
<!--X-From-R13: Oaqernf Oneqny Vnaffra <nunaffraNgebyygrpu.pbz> -->
<!--X-Date: Tue, 08 May 2007 16:33:27 +0200 -->
<!--X-Message-Id: f1q1ns$pmh$1@motorkatt.troll.no -->
<!--X-Content-Type: text/plain -->
<!--X-Reference: 463787E6.2080505@thesmithfam.org -->
<!--X-Reference: f1na84$8tn$1@motorkatt.troll.no -->
<!--X-Reference: 463F3479.4010100@thesmithfam.org -->
<!--X-Head-End-->

<!--X-Body-Begin-->
<!--X-User-Header-->

<!--X-User-Header-End-->
<!--X-TopPNI-->


<!--X-TopPNI-End-->
<!--X-MsgBody-->
<!--X-Subject-Header-Begin-->

<!--X-Subject-Header-End-->
<!--X-Head-of-Message-->
</p><ul>
<li><em>Subject</em>: Re: QSslSocket server side</li>
<li><em>From</em>: Andreas Aardal Hanssen &lt;<a href="mailto:ahanssen@DOMAIN.HIDDEN">ahanssen@xxxxxxxxxxxxx</a>&gt;</li>
<li><em>Date</em>: Tue, 08 May 2007 16:33:27 +0200</li>
<li><em>Delivered-to</em>: qt4-preview-feedback@trolltech.com</li>
<li><em>List-help</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=help">mailto:qt4-preview-feedback-request@trolltech.com?subject=help</a>&gt;</li>
<li><em>List-post</em>: &lt;<a href="mailto:qt4-preview-feedback@trolltech.com">mailto:qt4-preview-feedback@trolltech.com</a>&gt;</li>
<li><em>List-subscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe</a>&gt;</li>
<li><em>List-unsubscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe</a>&gt;</li>
<li><em>Organization</em>: Trolltech ASA (Oslo Office)</li>
<li><em>Resent-from</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
<li><em>Resent-message-id</em>: &lt;YkPLXC.A.EKC.BpIQGB@esparsett&gt;</li>
<li><em>Resent-sender</em>: <a href="mailto:qt4-preview-feedback-request@DOMAIN.HIDDEN">qt4-preview-feedback-request@xxxxxxxxxxxxx</a></li>
<li><em>To</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
</ul>
<!--X-Head-of-Message-End-->
<!--X-Head-Body-Sep-Begin-->
<p>
<!--X-Head-Body-Sep-End-->
<!--X-Body-of-Message-->
</p><pre>Dave Smith wrote:
&gt; QString keyStr =
&gt; "-----BEGIN RSA PRIVATE KEY-----\n"
&gt; "MIICWgIBAAKBgQC8C7fiBETDG7ykGpmtRxc326Pm5HDoekHcUS7DxpCLr4cRWDc0"
&gt; "52jfAXpOcEh1ExOwZe6yuve42v4LpEZ3UA/al0UB5/YaIiNX4Zv89las8hLMi+Ah"
&gt; "FEv25vhFctKRD+MbwGV2aFqhfCXyXusF/hx+GVxm7Bm5K5im8RTy4y+2KwIDAQAB"
&gt; "AoGABJIgWR0Tcs6kyjRfUeftd40eMcmRuQTnvuw2P8n+z3ZnyRMk3GNXmDwX9foi"
&gt; "uL3K97mykKOcy+B+1lea4uGOUQ40pLkjZl+tAsHLirNDl9kkL44WUKw/Tlh429kp"
&gt; "roeTI/jUjRESQoPRBP5Bwp21jX8lUAANOQRIf7xvDSpSMykCQQDrsaBbKlulPYpg"
&gt; "3ejN5hTGGjDkFeGh/IgOBJWwjH1JhSrrYYCF/6ZXeKGuixBsuXhhbjlbjRq9IgJE"
&gt; "8TR2rWsHAkEAzD8vH9HEvj31jJYlECBis0cUddUNsuqTryLhu+vPwZlQIjrG29/y"
&gt; "72X+XVS6/x6wwUgl8/0ZnAUvDG9WteQ+vQJAcvuA43jSpNZU/9TCklBAqjR0zZDv"
&gt; "NntgVJZgAHVJWeihe5the/2wRNQQ7HnjVWdWFxIS4VsBRGum98NEePE5WQI/AZh8"
&gt; "xcLdxp61TGPf5kBahQwJHOKNONicTsH3AYDWHq0T8zCCXTVisHwbgJ8o1tVmjBwE"
&gt; "L+PKT2268F3uT315AkB5QL7yPtRCzV1W1xFCeCl11cGceFKAubkUCMWckGGOX91O"
&gt; "ggIv32fSA+5zt9XTsiGJRcNe/GOw9YFJC8mg7YFE\n"
&gt; "-----END RSA PRIVATE KEY-----";

This doesn't seem to work with OpenSSL either; have you tried using the
certificates as they are stored on disk by OpenSSL, and feed them into
these constructors byte by byte?

-- 
 [ signature omitted ] 
</pre>
<!--X-Body-of-Message-End-->
<!--X-MsgBody-End-->
<!--X-Follow-Ups-->
<hr>
<!--X-Follow-Ups-End-->
<!--X-References-->
<!--X-References-End-->
<!--X-BotPNI-->


<!--X-BotPNI-End-->
<!--X-User-Footer-->

<!--X-User-Footer-End-->

<a name="msg00034">Message</a> 5 in thread<p>
<!-- MHonArc v2.6.10 -->
<!--X-Subject: Re: QSslSocket server side -->
<!--X-From-R13: Rnir Ezvgu <qnirNgurfzvgusnz.bet> -->
<!--X-Date: Tue, 08 May 2007 11:50:50 &#45;0600 -->
<!--X-Message-Id: 4640B87A.30808@thesmithfam.org -->
<!--X-Content-Type: text/plain -->
<!--X-Reference: 463787E6.2080505@thesmithfam.org -->
<!--X-Reference: f1na84$8tn$1@motorkatt.troll.no -->
<!--X-Reference: 463F3479.4010100@thesmithfam.org -->
<!--X-Reference: f1q1ns$pmh$1@motorkatt.troll.no -->
<!--X-Head-End-->

<!--X-Body-Begin-->
<!--X-User-Header-->

<!--X-User-Header-End-->
<!--X-TopPNI-->


<!--X-TopPNI-End-->
<!--X-MsgBody-->
<!--X-Subject-Header-Begin-->

<!--X-Subject-Header-End-->
<!--X-Head-of-Message-->
</p><ul>
<li><em>Subject</em>: Re: QSslSocket server side</li>
<li><em>From</em>: Dave Smith &lt;<a href="mailto:dave@DOMAIN.HIDDEN">dave@xxxxxxxxxxxxxxx</a>&gt;</li>
<li><em>Date</em>: Tue, 08 May 2007 11:50:50 -0600</li>
<li><em>Cc</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
<li><em>Delivered-to</em>: qt4-preview-feedback@trolltech.com</li>
<li><em>List-help</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=help">mailto:qt4-preview-feedback-request@trolltech.com?subject=help</a>&gt;</li>
<li><em>List-post</em>: &lt;<a href="mailto:qt4-preview-feedback@trolltech.com">mailto:qt4-preview-feedback@trolltech.com</a>&gt;</li>
<li><em>List-subscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe</a>&gt;</li>
<li><em>List-unsubscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe</a>&gt;</li>
<li><em>Resent-from</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
<li><em>Resent-message-id</em>: &lt;p70K4D.A.MQF.DiLQGB@esparsett&gt;</li>
<li><em>Resent-sender</em>: <a href="mailto:qt4-preview-feedback-request@DOMAIN.HIDDEN">qt4-preview-feedback-request@xxxxxxxxxxxxx</a></li>
<li><em>To</em>: Andreas Aardal Hanssen &lt;<a href="mailto:ahanssen@DOMAIN.HIDDEN">ahanssen@xxxxxxxxxxxxx</a>&gt;</li>
</ul>
<!--X-Head-of-Message-End-->
<!--X-Head-Body-Sep-Begin-->
<p>
<!--X-Head-Body-Sep-End-->
<!--X-Body-of-Message-->
</p><pre>Andreas Aardal Hanssen wrote:
&gt; Dave Smith wrote:
&gt;   
&gt;&gt; QString keyStr =
&gt;&gt; "-----BEGIN RSA PRIVATE KEY-----\n"
&gt;&gt; "MIICWgIBAAKBgQC8C7fiBETDG7ykGpmtRxc326Pm5HDoekHcUS7DxpCLr4cRWDc0"
&gt;&gt; "52jfAXpOcEh1ExOwZe6yuve42v4LpEZ3UA/al0UB5/YaIiNX4Zv89las8hLMi+Ah"
&gt;&gt; "FEv25vhFctKRD+MbwGV2aFqhfCXyXusF/hx+GVxm7Bm5K5im8RTy4y+2KwIDAQAB"
&gt;&gt; "AoGABJIgWR0Tcs6kyjRfUeftd40eMcmRuQTnvuw2P8n+z3ZnyRMk3GNXmDwX9foi"
&gt;&gt; "uL3K97mykKOcy+B+1lea4uGOUQ40pLkjZl+tAsHLirNDl9kkL44WUKw/Tlh429kp"
&gt;&gt; "roeTI/jUjRESQoPRBP5Bwp21jX8lUAANOQRIf7xvDSpSMykCQQDrsaBbKlulPYpg"
&gt;&gt; "3ejN5hTGGjDkFeGh/IgOBJWwjH1JhSrrYYCF/6ZXeKGuixBsuXhhbjlbjRq9IgJE"
&gt;&gt; "8TR2rWsHAkEAzD8vH9HEvj31jJYlECBis0cUddUNsuqTryLhu+vPwZlQIjrG29/y"
&gt;&gt; "72X+XVS6/x6wwUgl8/0ZnAUvDG9WteQ+vQJAcvuA43jSpNZU/9TCklBAqjR0zZDv"
&gt;&gt; "NntgVJZgAHVJWeihe5the/2wRNQQ7HnjVWdWFxIS4VsBRGum98NEePE5WQI/AZh8"
&gt;&gt; "xcLdxp61TGPf5kBahQwJHOKNONicTsH3AYDWHq0T8zCCXTVisHwbgJ8o1tVmjBwE"
&gt;&gt; "L+PKT2268F3uT315AkB5QL7yPtRCzV1W1xFCeCl11cGceFKAubkUCMWckGGOX91O"
&gt;&gt; "ggIv32fSA+5zt9XTsiGJRcNe/GOw9YFJC8mg7YFE\n"
&gt;&gt; "-----END RSA PRIVATE KEY-----";
&gt;&gt;     
&gt;
&gt; This doesn't seem to work with OpenSSL either; have you tried using the
&gt; certificates as they are stored on disk by OpenSSL, and feed them into
&gt; these constructors byte by byte

I've now tried the above method (as QString) and by passing a QFile to 
the QSslCertificate constructor, but in both cases, I get an isNull() 
cert object.

--Dave

To unsubscribe - send "unsubscribe" in the subject to qt4-preview-feedback-request@xxxxxxxxxxxxx

</pre>

<!--X-Body-of-Message-End-->
<!--X-MsgBody-End-->
<!--X-Follow-Ups-->
<hr>
<!--X-Follow-Ups-End-->
<!--X-References-->
<!--X-References-End-->
<!--X-BotPNI-->


<!--X-BotPNI-End-->
<!--X-User-Footer-->

<!--X-User-Footer-End-->

<a name="msg00036">Message</a> 6 in thread<p>
<!-- MHonArc v2.6.10 -->
<!--X-Subject: Re: QSslSocket server side -->
<!--X-From-R13: Oaqernf Oneqny Vnaffra <nunaffraNgebyygrpu.pbz> -->
<!--X-Date: Wed, 09 May 2007 08:42:22 +0200 -->
<!--X-Message-Id: f1rqge$qt1$1@motorkatt.troll.no -->
<!--X-Content-Type: text/plain -->
<!--X-Reference: 463787E6.2080505@thesmithfam.org -->
<!--X-Reference: f1na84$8tn$1@motorkatt.troll.no -->
<!--X-Reference: 463F3479.4010100@thesmithfam.org -->
<!--X-Reference: f1q1ns$pmh$1@motorkatt.troll.no -->
<!--X-Reference: 4640B87A.30808@thesmithfam.org -->
<!--X-Head-End-->

<!--X-Body-Begin-->
<!--X-User-Header-->

<!--X-User-Header-End-->
<!--X-TopPNI-->


<!--X-TopPNI-End-->
<!--X-MsgBody-->
<!--X-Subject-Header-Begin-->

<!--X-Subject-Header-End-->
<!--X-Head-of-Message-->
</p><ul>
<li><em>Subject</em>: Re: QSslSocket server side</li>
<li><em>From</em>: Andreas Aardal Hanssen &lt;<a href="mailto:ahanssen@DOMAIN.HIDDEN">ahanssen@xxxxxxxxxxxxx</a>&gt;</li>
<li><em>Date</em>: Wed, 09 May 2007 08:42:22 +0200</li>
<li><em>Delivered-to</em>: qt4-preview-feedback@trolltech.com</li>
<li><em>List-help</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=help">mailto:qt4-preview-feedback-request@trolltech.com?subject=help</a>&gt;</li>
<li><em>List-post</em>: &lt;<a href="mailto:qt4-preview-feedback@trolltech.com">mailto:qt4-preview-feedback@trolltech.com</a>&gt;</li>
<li><em>List-subscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe</a>&gt;</li>
<li><em>List-unsubscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe</a>&gt;</li>
<li><em>Organization</em>: Trolltech ASA (Oslo Office)</li>
<li><em>Resent-from</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
<li><em>Resent-message-id</em>: &lt;MO4orC.A.ZhF.P1WQGB@esparsett&gt;</li>
<li><em>Resent-sender</em>: <a href="mailto:qt4-preview-feedback-request@DOMAIN.HIDDEN">qt4-preview-feedback-request@xxxxxxxxxxxxx</a></li>
<li><em>To</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
</ul>
<!--X-Head-of-Message-End-->
<!--X-Head-Body-Sep-Begin-->
<p>
<!--X-Head-Body-Sep-End-->
<!--X-Body-of-Message-->
</p><pre>Dave Smith wrote:
&gt;&gt; This doesn't seem to work with OpenSSL either; have you tried using the
&gt;&gt; certificates as they are stored on disk by OpenSSL, and feed them into
&gt;&gt; these constructors byte by byte
&gt; I've now tried the above method (as QString) and by passing a QFile to
&gt; the QSslCertificate constructor, but in both cases, I get an isNull()
&gt; cert object.

I've managed to get your key and cert parsed with three approaches; from a
file, from data, and through the QSslCertificate::fromPath() functions.
I've found one bug that might be affecting your code path; could you try
adding QSslSocket::supportsSsl() to the start of your main()?

Btw, the cert file contains the same as the bytearray below.

-----

#include &lt;QtGui&gt;
#include &lt;QtNetwork&gt;

int main(int argc, char *argv[])
{
    QApplication app(argc, argv);

    QSslSocket::supportsSsl();
    
    QList&lt;QSslCertificate&gt; certs = QSslCertificate::fromPath("cert");
    qDebug() &lt;&lt; "Loaded # certs from disk:" &lt;&lt; certs.size();
    qDebug() &lt;&lt; "Cert is null?" &lt;&lt; certs.first().isNull();

    QFile file("cert");
    file.open(QIODevice::ReadOnly);

    qDebug() &lt;&lt; "Loaded cert from file, is null?" &lt;&lt;
QSslCertificate(&amp;file).isNull();

    QByteArray data("-----BEGIN CERTIFICATE-----\n"
            "MIIDJDCCAo2gAwIBAgIBADANBgkqhkiG9w0BAQQFADBwMQswCQYDVQQGEwJVUzEN\n"
            "MAsGA1UECBMEVXRhaDEXMBUGA1UEBxMOU2FsdCBMYWtlIENpdHkxDDAKBgNVBAoT\n"
            "A0FTVDEMMAoGA1UECxMDVVRPMR0wGwYDVQQDExRkanNtaXRobHguYXBwc2lnLmNv\n"
            "bTAeFw0wNzA0MjQxOTU0MjlaFw0wODA0MjMxOTU0MjlaMHAxCzAJBgNVBAYTAlVT\n"
            "MQ0wCwYDVQQIEwRVdGFoMRcwFQYDVQQHEw5TYWx0IExha2UgQ2l0eTEMMAoGA1UE\n"
            "ChMDQVNUMQwwCgYDVQQLEwNVVE8xHTAbBgNVBAMTFGRqc21pdGhseC5hcHBzaWcu\n"
            "Y29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC8C7fiBETDG7ykGpmtRxc3\n"
            "26Pm5HDoekHcUS7DxpCLr4cRWDc052jfAXpOcEh1ExOwZe6yuve42v4LpEZ3UA/a\n"
            "l0UB5/YaIiNX4Zv89las8hLMi+AhFEv25vhFctKRD+MbwGV2aFqhfCXyXusF/hx+\n"
            "GVxm7Bm5K5im8RTy4y+2KwIDAQABo4HNMIHKMB0GA1UdDgQWBBQV/1cfoKpQ7B1u\n"
            "wutfOZpdOpGMfjCBmgYDVR0jBIGSMIGPgBQV/1cfoKpQ7B1uwutfOZpdOpGMfqF0\n"
            "pHIwcDELMAkGA1UEBhMCVVMxDTALBgNVBAgTBFV0YWgxFzAVBgNVBAcTDlNhbHQg\n"
            "TGFrZSBDaXR5MQwwCgYDVQQKEwNBU1QxDDAKBgNVBAsTA1VUTzEdMBsGA1UEAxMU\n"
            "ZGpzbWl0aGx4LmFwcHNpZy5jb22CAQAwDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0B\n"
            "AQQFAAOBgQBDDv9Pds4cAzwcQmCH33st2zbs6i5HGkt43V2N9P8ze0GZa8Z88ni9\n"
            "uBPf/iNZY/y0k6cSPe/mLZM5FysrbByeNVarknxJbUconyRGlbyslfaqeZv7bZMh\n"
            "0GlXGA60mmCxyNglw4+BHRAboAK+ck7ssypzmA7hxqg4+l+i5brEpg==\n"
            "-----END CERTIFICATE-----\n");

    qDebug() &lt;&lt; "Loaded cert from data, is null?"
             &lt;&lt; QSslCertificate(data).isNull();
}

-- 
 [ signature omitted ] 
</pre>
<!--X-Body-of-Message-End-->
<!--X-MsgBody-End-->
<!--X-Follow-Ups-->
<hr>
<!--X-Follow-Ups-End-->
<!--X-References-->
<!--X-References-End-->
<!--X-BotPNI-->


<!--X-BotPNI-End-->
<!--X-User-Footer-->

<!--X-User-Footer-End-->

<a name="msg00040">Message</a> 7 in thread<p>
<!-- MHonArc v2.6.10 -->
<!--X-Subject: Re: QSslSocket server side -->
<!--X-From-R13: Rnir Ezvgu <qnirNgurfzvgusnz.bet> -->
<!--X-Date: Wed, 09 May 2007 10:36:23 &#45;0600 -->
<!--X-Message-Id: 4641F887.1040300@thesmithfam.org -->
<!--X-Content-Type: text/plain -->
<!--X-Reference: 463787E6.2080505@thesmithfam.org -->
<!--X-Reference: f1na84$8tn$1@motorkatt.troll.no -->
<!--X-Reference: 463F3479.4010100@thesmithfam.org -->
<!--X-Reference: f1q1ns$pmh$1@motorkatt.troll.no -->
<!--X-Reference: 4640B87A.30808@thesmithfam.org -->
<!--X-Reference: f1rqge$qt1$1@motorkatt.troll.no -->
<!--X-Head-End-->

<!--X-Body-Begin-->
<!--X-User-Header-->

<!--X-User-Header-End-->
<!--X-TopPNI-->


<!--X-TopPNI-End-->
<!--X-MsgBody-->
<!--X-Subject-Header-Begin-->

<!--X-Subject-Header-End-->
<!--X-Head-of-Message-->
</p><ul>
<li><em>Subject</em>: Re: QSslSocket server side</li>
<li><em>From</em>: Dave Smith &lt;<a href="mailto:dave@DOMAIN.HIDDEN">dave@xxxxxxxxxxxxxxx</a>&gt;</li>
<li><em>Date</em>: Wed, 09 May 2007 10:36:23 -0600</li>
<li><em>Delivered-to</em>: qt4-preview-feedback@trolltech.com</li>
<li><em>List-help</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=help">mailto:qt4-preview-feedback-request@trolltech.com?subject=help</a>&gt;</li>
<li><em>List-post</em>: &lt;<a href="mailto:qt4-preview-feedback@trolltech.com">mailto:qt4-preview-feedback@trolltech.com</a>&gt;</li>
<li><em>List-subscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe</a>&gt;</li>
<li><em>List-unsubscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe</a>&gt;</li>
<li><em>Resent-from</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
<li><em>Resent-message-id</em>: &lt;J_5Xm.A.GID.KifQGB@esparsett&gt;</li>
<li><em>Resent-sender</em>: <a href="mailto:qt4-preview-feedback-request@DOMAIN.HIDDEN">qt4-preview-feedback-request@xxxxxxxxxxxxx</a></li>
<li><em>To</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
</ul>
<!--X-Head-of-Message-End-->
<!--X-Head-Body-Sep-Begin-->
<p>
<!--X-Head-Body-Sep-End-->
<!--X-Body-of-Message-->
</p><pre>Andreas Aardal Hanssen wrote:
&gt; I've managed to get your key and cert parsed with three approaches; from a
&gt; file, from data, and through the QSslCertificate::fromPath() functions.
&gt; I've found one bug that might be affecting your code path; could you try
&gt; adding QSslSocket::supportsSsl() to the start of your main()?
&gt;   
QSslSocket::supportsSsl() does indeed return true.

I think I just discovered the problem. The "-----END CERTIFICATE-----" 
line must end with "\n". Mine did not. The cert loads now. Will update 
you as to the key in a moment.

--Dave

To unsubscribe - send "unsubscribe" in the subject to qt4-preview-feedback-request@xxxxxxxxxxxxx

</pre>

<!--X-Body-of-Message-End-->
<!--X-MsgBody-End-->
<!--X-Follow-Ups-->
<hr>
<!--X-Follow-Ups-End-->
<!--X-References-->
<!--X-References-End-->
<!--X-BotPNI-->


<!--X-BotPNI-End-->
<!--X-User-Footer-->

<!--X-User-Footer-End-->

<a name="msg00041">Message</a> 8 in thread<p>
<!-- MHonArc v2.6.10 -->
<!--X-Subject: Re: QSslSocket server side -->
<!--X-From-R13: Rnir Ezvgu <qnirNgurfzvgusnz.bet> -->
<!--X-Date: Wed, 09 May 2007 10:38:23 &#45;0600 -->
<!--X-Message-Id: 4641F8FF.7030400@thesmithfam.org -->
<!--X-Content-Type: text/plain -->
<!--X-Reference: 463787E6.2080505@thesmithfam.org -->
<!--X-Reference: f1na84$8tn$1@motorkatt.troll.no -->
<!--X-Reference: 463F3479.4010100@thesmithfam.org -->
<!--X-Reference: f1q1ns$pmh$1@motorkatt.troll.no -->
<!--X-Reference: 4640B87A.30808@thesmithfam.org -->
<!--X-Reference: f1rqge$qt1$1@motorkatt.troll.no -->
<!--X-Reference: 4641F887.1040300@thesmithfam.org -->
<!--X-Head-End-->

<!--X-Body-Begin-->
<!--X-User-Header-->

<!--X-User-Header-End-->
<!--X-TopPNI-->


<!--X-TopPNI-End-->
<!--X-MsgBody-->
<!--X-Subject-Header-Begin-->

<!--X-Subject-Header-End-->
<!--X-Head-of-Message-->
</p><ul>
<li><em>Subject</em>: Re: QSslSocket server side</li>
<li><em>From</em>: Dave Smith &lt;<a href="mailto:dave@DOMAIN.HIDDEN">dave@xxxxxxxxxxxxxxx</a>&gt;</li>
<li><em>Date</em>: Wed, 09 May 2007 10:38:23 -0600</li>
<li><em>Delivered-to</em>: qt4-preview-feedback@trolltech.com</li>
<li><em>List-help</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=help">mailto:qt4-preview-feedback-request@trolltech.com?subject=help</a>&gt;</li>
<li><em>List-post</em>: &lt;<a href="mailto:qt4-preview-feedback@trolltech.com">mailto:qt4-preview-feedback@trolltech.com</a>&gt;</li>
<li><em>List-subscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=subscribe</a>&gt;</li>
<li><em>List-unsubscribe</em>: &lt;<a href="mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe">mailto:qt4-preview-feedback-request@trolltech.com?subject=unsubscribe</a>&gt;</li>
<li><em>Resent-from</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
<li><em>Resent-message-id</em>: &lt;DCSkN.A.idD.BkfQGB@esparsett&gt;</li>
<li><em>Resent-sender</em>: <a href="mailto:qt4-preview-feedback-request@DOMAIN.HIDDEN">qt4-preview-feedback-request@xxxxxxxxxxxxx</a></li>
<li><em>To</em>: <a href="mailto:qt4-preview-feedback@DOMAIN.HIDDEN">qt4-preview-feedback@xxxxxxxxxxxxx</a></li>
</ul>
<!--X-Head-of-Message-End-->
<!--X-Head-Body-Sep-Begin-->
<p>
<!--X-Head-Body-Sep-End-->
<!--X-Body-of-Message-->
</p><pre>Dave Smith wrote:
&gt; Andreas Aardal Hanssen wrote:
&gt;&gt; I've managed to get your key and cert parsed with three approaches; 
&gt;&gt; from a
&gt;&gt; file, from data, and through the QSslCertificate::fromPath() functions.
&gt;&gt; I've found one bug that might be affecting your code path; could you try
&gt;&gt; adding QSslSocket::supportsSsl() to the start of your main()?
&gt;&gt;   
&gt; QSslSocket::supportsSsl() does indeed return true.
&gt;
&gt; I think I just discovered the problem. The "-----END CERTIFICATE-----" 
&gt; line must end with "\n". Mine did not. The cert loads now. Will update 
&gt; you as to the key in a moment.

Same problem with the key string. Loading the QSslKey works now. :)

(always the simple things isn't it?)

--Dave

To unsubscribe - send "unsubscribe" in the subject to qt4-preview-feedback-request@xxxxxxxxxxxxx

</pre>

<!--X-Body-of-Message-End-->
<!--X-MsgBody-End-->
<!--X-Follow-Ups-->
<hr>
<!--X-Follow-Ups-End-->
<!--X-References-->
<!--X-References-End-->
<!--X-BotPNI-->


<!--X-BotPNI-End-->
<!--X-User-Footer-->

<!--X-User-Footer-End-->

</body><span id="skype_highlighting_settings" display="none" autoextractnumbers="1"></span><object id="skype_plugin_object" location.href="http://lists.trolltech.com/qt4-preview-feedback/2007-05/msg00019.html" location.hostname="lists.trolltech.com" style="position: absolute; visibility: hidden; left: -100px; top: -100px; " width="0" height="0" type="application/x-vnd.skype.toolbars.npplugin.4.2.0"></object></html>