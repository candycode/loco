<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0056)http://www.akadia.com/services/ssh_test_certificate.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
    <meta name="generator" content="HTML Tidy, see www.w3.org">
    <meta http-equiv="expires" content="86400">
    <meta name="author" content="AKADIA Information Technology AG">
    <meta name="description" content="AKADIA Information Technology AG, Bern, Schweiz">
    <meta name="distribution" content="global">
    <link rel="stylesheet" href="./How to create a self-signed Certificate_files/website.css" type="text/css">
    <title>
      How to create a self-signed Certificate
    </title>
  <script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/document_iterator.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/find_proxy.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/get_html_text.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/global_constants.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/name_injection_builder.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/number_injection_builder.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/string_finder.js"></script><script src="chrome-extension://lifbcibllhkdhoafpjfnlhfpfgnpldfl/change_sink.js"></script><meta name="document_iterator.js"><meta name="find_proxy.js"><meta name="get_html_text.js"><meta name="global_constants.js"><meta name="name_injection_builder.js"><meta name="number_injection_builder.js"><meta name="string_finder.js"><meta name="change_sink.js"></head>
  <body bgcolor="#FFFFFF" text="#000000" vlink="#0000FF" alink="#0000FF" leftmargin="20">
    <table border="0" cellpadding="0" cellspacing="0" width="778" height="20">
      <tbody><tr>
        <td valign="top" colspan="2" width="778">
          &nbsp;&nbsp;
        </td>
      </tr>
      <tr>
        <td valign="top" width="153" height="51">
          <a href="javascript:history.back()"><img src="./How to create a self-signed Certificate_files/zurueck.gif" alt="Zurück" border="0" width="76" height="19"></a> 
        </td>
        <td valign="top" height="17" width="625">
          <h1>
            <span lang="en-us">How to create a self-signed</span> SSL <span lang="en-us">Certificate ...</span>
          </h1>
          <p class="big">
            <span style="font-weight: 400" lang="en-us">...&nbsp; which can be used for testing
            purposes or internal usage</span>
          </p>
          <hr color="#34B389" noshade="">
        </td>
      </tr>
      <tr>
        <td valign="top" colspan="2" height="74" width="778">
          <p class="big">
            <span lang="en-us">Overview</span>
          </p>
          <blockquote>
            <p>
              <span lang="en-us">The following is an extremely simplified view of how SSL is
              implemented and what part the certificate plays in the entire process.</span>
            </p>
            <p>
              <span lang="en-us">Normal web traffic is sent unencrypted over the Internet. That is,
              anyone with access to the right tools can snoop all of that traffic. Obviously, this
              can lead to problems, especially where security and privacy is necessary, such as in
              credit card data and bank transactions. The Secure Socket Layer is used to encrypt
              the data stream between the web server and the web client (the browser).</span>
            </p>
            <p>
              <span lang="en-us">SSL makes use of what is known as <b>asymmetric cryptography</b>,
              commonly referred to as <b>public key cryptography (PKI)</b>. With public key
              cryptography, two keys are created, one public, one private. Anything encrypted with
              either key can only be decrypted with its corresponding key. Thus if a message or
              data stream were encrypted with the server's private key, it can be decrypted only
              using its corresponding public key, ensuring that the data only could have come from
              the server.</span>
            </p>
            <p>
              <span lang="en-us">If SSL utilizes public key cryptography to encrypt the data stream
              traveling over the Internet, why is a certificate necessary? The technical answer to
              that question is that a certificate is not really necessary</span> - <span lang="en-us">the data is secure and cannot easily be decrypted by a third party. However,
              certificates do serve a crucial role in the communication process. The certificate,
              signed by a trusted Certificate Authority (CA), ensures that the certificate holder
              is really who he claims to be. Without a trusted signed certificate, your data may be
              encrypted, however, the party you are communicating with may not be whom you think.
              Without certificates, impersonation attacks would be much more common.</span>
            </p>
          </blockquote>
          <p class="big">
            Step 1: <span lang="en-us">Gener</span>ate a <span lang="en-us">Private Key</span>
          </p>
          <blockquote>
            <p class="normal">
              <span lang="en-us">The <b>openssl</b> toolkit is used to generate an <b>RSA Private
              Key</b> and <b>CSR (Certificate Signing Request)</b>. It can also be used to generate
              self-signed certificates which can be used for testing purposes or internal
              usage.</span>
            </p>
            <p class="normal">
              <span lang="en-us">The first step is to create your RSA Private Key. This key is a
              1024 bit RSA key which is encrypted using Triple-DES and stored in a PEM format so
              that it is readable as ASCII text.</span>
            </p>
            <p class="courier">
              <b>openssl genrsa -des3 -out server.key 1024<br>
              <br>
              </b> <font color="#0000FF">Generating RSA private key, 1024 bit long modulus<br>
               .........................................................++++++<br>
               ........++++++<br>
               e is 65537 (0x10001)<br>
               Enter PEM pass phrase:<br>
               Verifying password - Enter PEM pass phrase:</font>
            </p>
          </blockquote>
          <p class="big">
            Step 2: Generate a CSR (Certificate Signing Request)
          </p>
          <blockquote>
            <p class="normal">
              Once the private key is generated a Certificate Signing Request can be generated. The
              CSR is then used in one of two ways. Ideally, the CSR will be sent to a Certificate
              Authority, such as Thawte or Verisign who will verify the identity of the requestor
              and issue a signed certificate. <b>The second option is to self-sign the CSR, which
              will be demonstrated in the next section</b>.
            </p>
            <p class="normal">
              During the generation of the CSR, you will be prompted for several pieces of
              information. These are the X.509 attributes of the certificate. One of the prompts
              will be for "Common Name (e.g., YOUR name)". It is important that this field be
              filled in with the fully qualified domain name of the server to be protected by SSL.
              If the website to be protected will be https://public.akadia.com, then enter
              public.akadia.com at this prompt. The command to generate the CSR is as follows:
            </p>
            <p class="courier">
              <b>openssl req -new -key server.key -out server.csr<br>
              <br>
              </b> <font color="#0000FF">Country Name (2 letter code) [GB]</font>:<b>CH</b><br>
               <font color="#0000FF">State or Province Name (full name)
              [Berkshire]</font>:<b>Bern</b><br>
               <font color="#0000FF">Locality Name (eg, city)
              [Newbury]</font>:<b>Oberdiessbach</b><br>
               <font color="#0000FF">Organization Name (eg, company) [My Company
              Ltd]</font>:<b>Akadia AG</b><br>
               <font color="#0000FF">Organizational Unit Name (eg, section)
              []</font>:<b>Information Technology</b><br>
               <font color="#0000FF">Common Name (eg, your name or your server's hostname)
              []</font>:<b>public.akadia.com</b><br>
               <font color="#0000FF">Email Address []</font>:<b>martin dot zahn at akadia dot ch</b><br>
               <font color="#0000FF">Please enter the following 'extra' attributes<br>
               to be sent with your certificate request<br>
               A challenge password []:<br>
               An optional company name []:</font>
            </p>
          </blockquote>
          <p class="big">
            Step 3: Remove Passphrase from Key
          </p>
          <blockquote>
            <p class="normal">
              One unfortunate side-effect of the pass-phrased private key is <b>that Apache will
              ask for the pass-phrase each time the web server is started</b>. Obviously this is
              not necessarily convenient as someone will not always be around to type in the
              pass-phrase, such as after a reboot or crash. mod_ssl includes the ability to use an
              external program in place of the built-in pass-phrase dialog, however, this is not
              necessarily the most secure option either. <b>It is possible to remove the Triple-DES
              encryption from the key</b>, thereby no longer needing to type in a pass-phrase. If
              the private key is no longer encrypted, it is critical that this file only be
              readable by the root user! If your system is ever compromised and a third party
              obtains your unencrypted private key, the corresponding certificate will need to be
              revoked. With that being said, use the following command to remove the pass-phrase
              from the key:
            </p>
            <p class="courier">
              <b>cp server.key server.key.org<br>
               openssl rsa -in server.key.org -out server.key</b>
            </p>
            <p>
              The newly created server.key file has no more passphrase in it.
            </p>
            <p class="courier">
              <font color="#0000FF">-rw-r--r-- 1 root root 745 Jun 29 12:19 server.csr<br>
               -rw-r--r-- 1 root root 891 Jun 29 13:22 server.key<br>
               -rw-r--r-- 1 root root 963 Jun 29 13:22 server.key.org</font>
            </p>
          </blockquote>
          <p class="big">
            Step 4: Generating a Self-Signed Certificate
          </p>
          <blockquote>
            <p>
              At this point you will need to generate a self-signed certificate because you either
              don't plan on having your certificate signed by a CA, or you wish to test your new
              SSL implementation while the CA is signing your certificate. This temporary
              certificate will generate an error in the client browser to the effect that the
              signing certificate authority is unknown and not trusted.
            </p>
            <p>
              To generate a temporary certificate which is good for 365 days, issue the following
              command:
            </p>
            <p class="courier">
              <b>openssl x509 -req -days 365 -in server.csr -signkey server.key -out
              server.crt</b><br>
               <font color="#0000FF">Signature ok<br>
               subject=/C=CH/ST=Bern/L=Oberdiessbach/O=Akadia AG/OU=Information<br>
               Technology/CN=public.akadia.com/Email=martin dot zahn at akadia dot ch<br>
               Getting Private key</font>
            </p>
          </blockquote>
          <p class="big">
            Step 5: Installing the Private Key and Certificate
          </p>
          <blockquote>
            <p>
              When Apache with mod_ssl is installed, it creates several directories in the Apache
              config directory. The location of this directory will differ depending on how Apache
              was compiled.
            </p>
            <p class="courier">
              <b>cp server.crt /usr/local/apache/conf/ssl.crt<br>
               cp server.key /usr/local/apache/conf/ssl.key</b>
            </p>
          </blockquote>
          <p class="big">
            Step 6: Configuring SSL Enabled Virtual Hosts
          </p>
          <blockquote>
            <p class="courier">
              <b>SSLEngine on<br>
               SSLCertificateFile /usr/local/apache/conf/ssl.crt/server.crt<br>
               SSLCertificateKeyFile /usr/local/apache/conf/ssl.key/server.key<br>
               SetEnvIf User-Agent ".*MSIE.*" nokeepalive ssl-unclean-shutdown<br>
               CustomLog logs/ssl_request_log \<br>
               &nbsp;&nbsp; "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"</b>
            </p>
          </blockquote>
          <p class="big">
            <b>Step 7: Restart Apache and Test</b>
          </p>
          <blockquote>
            <p class="courier">
              <b>/etc/init.d/httpd stop<br>
               /etc/init.d/httpd stop</b>
            </p>
            <p class="courier">
              <b>https://public.akadia.com</b>
            </p>
          </blockquote>
        </td>
      </tr>
    </tbody></table>
  

</body><span id="skype_highlighting_settings" display="none" autoextractnumbers="1"></span><object id="skype_plugin_object" location.href="http://www.akadia.com/services/ssh_test_certificate.html" location.hostname="www.akadia.com" style="position: absolute; visibility: hidden; left: -100px; top: -100px; " width="0" height="0" type="application/x-vnd.skype.toolbars.npplugin.4.2.0"></object></html>